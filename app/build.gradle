plugins {
    id 'com.android.application'
    id 'kotlin-android'

    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {

    signingConfigs {
    }


    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
//            applicationIdSuffix '.debug' //增加包名后缀 （debug包与release包共存）
        }
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        if (variant.buildType.name == 'release') {
                            outputFileName = "wanandroid${nowTime()}_release_V${variant.versionName}.apk"
                        } else if (variant.buildType.name == 'debug') {
                            outputFileName = "wanandroid${nowTime()}_debug_V${variant.versionName}.apk"
                        }
                    }
            }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //统一资源前缀，规范资源引用
    resourcePrefix "app_"
    dataBinding {
        enabled true
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation project(path: ':lib_base')
    if (!isBuildModule.toBoolean()) {
        implementation project(path: ':module_login')
//        implementation project(path: ':module_main')
//        implementation project(path: ':module_user')
//        implementation project(path: ':module_search')
//        implementation project(path: ':module_square')
//        implementation project(path: ':module_project')
//        implementation project(path: ':module_web')
    }
}

static def nowTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}